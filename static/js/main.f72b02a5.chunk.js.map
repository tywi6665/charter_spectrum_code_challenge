{"version":3,"sources":["Components/Container.js","Components/Table/Datacell.js","Components/Table/Table.js","Components/Pagination.js","Components/Search/Filter.js","Components/Search/Search.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["Container","children","className","Datacell","data","name","city","state","telephone","genre","split","join","Table","map","restaurant","i","key","Pagination","currentPage","setCurrentPage","useState","pageNumbers","setPageNumbers","currentDataIndex","setCurrentDataIndex","useEffect","arr","Math","ceil","length","resultsPerPage","push","lastDataIndex","firstDataIndex","slice","handleClick","e","target","parentElement","querySelectorAll","forEach","classList","remove","add","Number","id","number","onClick","Filter","genres","filterByGenre","setFilterByGenre","states","filterByState","setFilterByState","defaultValue","onChange","value","Search","setSearchValue","searchValue","filterGenre","htmlFor","placeholder","State","fetchRestaurants","a","fetch","method","headers","Authorization","res","json","App","setIsLoaded","restaurants","setRestaurants","filteredRestaurants","setFilteredRestaurants","setGenres","API","then","sort","b","getGenres","searchAllRegex","RegExp","genreRegex","result","filter","test","genreList","subGenreList","j","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f72b02a5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Container = ({ children }) => {\r\n    return (\r\n        <div className=\"container\">\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Container;","import React from 'react';\r\n\r\nconst Datacell = ({ data }) => {\r\n    return (\r\n        <tr>\r\n            <td>{data.name}</td>\r\n            <td>{data.city}</td>\r\n            <td>{data.state}</td>\r\n            <td>{data.telephone}</td>\r\n            <td>{data.genre.split(\",\").join(\", \")}</td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default Datacell;","import React from 'react';\r\nimport Datacell from \"./Datacell\";\r\n\r\nconst Table = ({ data }) => {\r\n\r\n    return (\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>City</th>\r\n                    <th>State</th>\r\n                    <th>Phone Number</th>\r\n                    <th>Genre</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {data ? (\r\n                    data.map((restaurant, i) => {\r\n                        return (\r\n                            <Datacell\r\n                                key={i}\r\n                                data={restaurant}\r\n                            />\r\n                        )\r\n                    })\r\n                ) : (\r\n                        <tr>\r\n                            <td className=\"message\">Loading Restaurants</td>\r\n                        </tr>\r\n                    )}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default Table;","import React, { useState, useEffect } from \"react\";\r\nimport Table from \"./Table/Table\";\r\n\r\nconst Pagination = ({ data, currentPage, setCurrentPage }) => {\r\n\r\n    const [pageNumbers, setPageNumbers] = useState([])\r\n    const [currentDataIndex, setCurrentDataIndex] = useState(null)\r\n\r\n    useEffect(() => {\r\n        const arr = [];\r\n        for (let i = 1; i <= Math.ceil(data.length / currentPage.resultsPerPage); i++) {\r\n            arr.push(i);\r\n        }\r\n        setPageNumbers(arr)\r\n    }, [data, currentPage]);\r\n\r\n    useEffect(() => {\r\n        const lastDataIndex = currentPage.currentPage * currentPage.resultsPerPage;\r\n        const firstDataIndex = lastDataIndex - currentPage.resultsPerPage;\r\n        setCurrentDataIndex(data.slice(firstDataIndex, lastDataIndex));\r\n    }, [data, currentPage]);\r\n\r\n    const handleClick = e => {\r\n        e.target.parentElement.querySelectorAll(\".active\").forEach(e =>\r\n            e.classList.remove(\"active\"));\r\n        e.target.classList.add(\"active\");\r\n        setCurrentPage({\r\n            ...currentPage,\r\n            currentPage: Number(e.target.id)\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Table\r\n                data={currentDataIndex}\r\n            />\r\n            <ul className=\"pagination_ul\">\r\n                {pageNumbers.map(number => {\r\n                    return (\r\n                        <li\r\n                            className={number === 1 ? \"active\" : \"\"}\r\n                            key={number}\r\n                            id={number}\r\n                            onClick={handleClick}\r\n                        >\r\n                            {number}\r\n                        </li>\r\n                    );\r\n                })}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Pagination;","import React from \"react\";\r\n\r\nconst Filter = ({\r\n    genres,\r\n    filterByGenre,\r\n    setFilterByGenre,\r\n    states,\r\n    filterByState,\r\n    setFilterByState\r\n}) => {\r\n\r\n    const handleFilterByGenreChange = e => {\r\n        if (e.target.value === \"All\") {\r\n            setFilterByGenre(\"\")\r\n        } else {\r\n            setFilterByGenre(e.target.value);\r\n        }\r\n    };\r\n    const handleFilterByStateChange = e => {\r\n        if (e.target.value === \"All\") {\r\n            setFilterByState(\"\")\r\n        } else {\r\n            setFilterByState(e.target.value);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <label>Genre : </label>\r\n                <select defaultValue={filterByGenre} onChange={handleFilterByGenreChange}>\r\n                    <option value=\"All\">All</option>\r\n                    {genres.length > 0 ? (\r\n                        genres.map((genre, i) => {\r\n                            return <option key={i} value={genre}>{genre}</option>\r\n                        })\r\n                    ) : (<option value=\"-Loading-\">-Loading Genres-</option>)}\r\n                </select>\r\n                <label>State : </label>\r\n                <select defaultValue={filterByState} onChange={handleFilterByStateChange}>\r\n                    <option value=\"All\">All</option>\r\n                    {states.map((state, i) => {\r\n                        return <option key={i} value={state}>{state}</option>\r\n                    })}\r\n                </select>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\nimport Filter from \"./Filter\";\r\n\r\nconst Search = ({\r\n    setSearchValue,\r\n    searchValue,\r\n    genres,\r\n    filterGenre,\r\n    setFilterByGenre,\r\n    states,\r\n    filterByState,\r\n    setFilterByState\r\n}) => {\r\n\r\n    const handleSearchInputChanges = e => {\r\n        if (e.target.value === \"\") {\r\n            setSearchValue(\"\")\r\n        } else {\r\n            setSearchValue(e.target.value);\r\n        }\r\n    };\r\n\r\n    const clearFilter = e => {\r\n        setSearchValue(\"\");\r\n        setFilterByGenre(\"\");\r\n        setFilterByState(\"\");\r\n    };\r\n\r\n    return (\r\n        <div className=\"search\">\r\n            <h3>Search Bar</h3>\r\n            <form>\r\n                <label htmlFor=\"searchBar\">General Search: </label>\r\n                <input\r\n                    placeholder=\"Search\"\r\n                    State=\"text\"\r\n                    value={searchValue}\r\n                    onChange={handleSearchInputChanges}\r\n                    name=\"searchBar\"\r\n                />\r\n                <Filter\r\n                    genres={genres}\r\n                    filterGenre={filterGenre}\r\n                    setFilterByGenre={setFilterByGenre}\r\n                    states={states}\r\n                    filterByState={filterByState}\r\n                    setFilterByState={setFilterByState}\r\n                />\r\n                <button onClick={clearFilter}>Clear</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Search;","export default {\r\n    fetchRestaurants: async () => {\r\n        const res = await fetch(\"https://code-challenge.spectrumtoolbox.com/api/restaurants\", {\r\n            method: 'GET',\r\n            headers: {\r\n                Authorization: \"Api-Key q3MNxtfep8Gt\",\r\n            }\r\n        });\r\n        return await res.json();\r\n    }\r\n};","import React, { useState, useEffect } from \"react\";\nimport Container from \"./Components/Container\";\nimport Pagination from \"./Components/Pagination\";\nimport Search from \"./Components/Search/Search\";\nimport API from \"./utils/API\";\nimport \"./App.scss\";\n\nfunction App() {\n\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [restaurants, setRestaurants] = useState([]);\n  const [currentPage, setCurrentPage] = useState({\n    currentPage: 1,\n    resultsPerPage: 10\n  });\n  const [filteredRestaurants, setFilteredRestaurants] = useState([]);\n  const [searchValue, setSearchValue] = useState(\"\");\n  const [genres, setGenres] = useState(\"\");\n  const [filterByGenre, setFilterByGenre] = useState(\"\");\n  const [filterByState, setFilterByState] = useState(\"\");\n  const states = [\"AL\", \"AK\", \"AS\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FM\", \"FL\", \"GA\", \"GU\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MH\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"MP\", \"OH\", \"OK\", \"OR\", \"PW\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VI\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\"];\n\n  useEffect(() => {\n    API.fetchRestaurants().then(res => {\n      res.sort((a, b) => (a.name > b.name) ? 1 : -1);\n      getGenres(res);\n      setRestaurants(res);\n      setIsLoaded(true);\n    });\n  }, []);\n\n  useEffect(() => {\n    const searchAllRegex = searchValue && new RegExp(`${searchValue}`, \"gi\");\n    const genreRegex = filterByGenre && new RegExp(`${filterByGenre}`, \"gi\");\n    const result = restaurants.filter(\n      restaurant =>\n        (!searchAllRegex || searchAllRegex.test(restaurant.name) + searchAllRegex.test(restaurant.city) + searchAllRegex.test(restaurant.genre)) &&\n        (!genreRegex || genreRegex.test(restaurant.genre)) &&\n        (!filterByState || restaurant.state === filterByState)\n    );\n    setFilteredRestaurants(result);\n  }, [searchValue, restaurants, filterByGenre, filterByState]);\n\n  const getGenres = (data) => {\n    const genreList = []\n    for (let i = 0; i < data.length; i++) {\n      let subGenreList = data[i].genre.split(\",\");\n      for (let j = 0; j < subGenreList.length; j++) {\n        if (genreList.includes(subGenreList[j])) { }\n        else {\n          genreList.push(subGenreList[j])\n        }\n      }\n    }\n    genreList.sort((a, b) => (a > b) ? 1 : -1);\n    setGenres(genreList)\n  }\n\n  return (\n    <Container>\n      <div className=\"header\">\n        <Search\n          searchValue={searchValue}\n          setSearchValue={setSearchValue}\n          genres={genres}\n          filterByGenre={filterByGenre}\n          setFilterByGenre={setFilterByGenre}\n          states={states}\n          filterByState={filterByState}\n          setFilterByState={setFilterByState}\n        />\n        <div className=\"title\">\n          <h1>Welcome to the Restaurant Database!</h1>\n          <p>Please take some time to explore the carefully curated restaurants that we have for you.</p>\n        </div>\n      </div>\n      {filteredRestaurants.length > 0 ? (\n        <Pagination\n          data={filteredRestaurants}\n          currentPage={currentPage}\n          setCurrentPage={setCurrentPage}\n        />\n      ) : (\n          <p className=\"message\">Sorry, No Results :(</p>\n        )}\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}